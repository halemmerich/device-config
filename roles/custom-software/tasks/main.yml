- name: Install additional packages
  package:
    name: "{{ item }}"
    state: present
  loop: "{{software_packages}}"
  tags:
    - install

- name: Install additional packages as dependencies Arch
  pacman:
    name: "{{ item }}"
    reason: "dependency"
    state: present
  loop: "{{software_packages}}"
  when: ansible_os_family == "Archlinux"
  tags:
    - install

- name: Install additional packages Arch
  package:
    name: "{{ item }}"
    state: present
  loop: "{{software_packages_arch}}"
  when: ansible_os_family == "Archlinux"
  tags:
    - install

- name: Install additional packages Debian
  package:
    name: "{{ item }}"
    state: present
  loop: "{{software_packages_debian}}"
  when: ansible_os_family == "Debian"
  tags:
    - install

- name: Remove absent custom packages
  flatpak:
    name: "{{ item }}"
    state: absent
  loop: "{{software_packages_absent}}"
  when: software_packages_absent is defined
  tags:
    - install

- name: Install flatpak
  package:
    name: flatpak
    state: present
  when: software_flatpaks is defined
  tags:
    - install

- name: Install custom flatpaks
  flatpak:
    name: "{{ item }}"
    state: present
  loop: "{{software_flatpaks}}"
  when: software_flatpaks is defined
  tags:
    - install

- name: Remove absent custom flatpaks
  flatpak:
    name: "{{ item }}"
    state: absent
  loop: "{{ software_flatpaks_absent }}"
  when: software_flatpaks_absent is defined
  ignore_errors: true
  tags:
    - install

- name: Update flatpaks
  command: "flatpak update --noninteractive"
  when: software_flatpaks is defined
  tags:
    - upgrade

- name: Add user binaries
  copy:
    src: "files/custom-software/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    mode: "0755"
  loop: "{{ software_userbinaries }}"
  tags:
    - config

- name: Add custom files
  copy:
    src: "files/custom-software/{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0755"
  loop: "{{ software_files }}"
  tags:
    - config

- name: 'Enable and start services'
  systemd:
    name: "{{ item }}"
    daemon-reload: yes
    enabled: yes
    state: started
  loop: "{{ software_services }}"
  when: software_services is defined
  tags:
    - config
