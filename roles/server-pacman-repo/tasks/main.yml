- user:
    name: pacmanrepo
    create_home: yes
    home: /var/lib/pacman-repo
  tags:
    - config

- name: 'Create scripts'
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0700'
  loop:
    - { src: "server_pacmanrepo_resetpwd.j2", dest: "/usr/local/bin/server_pacmanrepo_resetpwd" }
    - { src: "server_pacmanrepo_adduser.j2", dest: "/usr/local/bin/server_pacmanrepo_adduser" }
    - { src: "backup/backup.sh.j2", dest: "/usr/local/lib/backupscripts/backup/webdav.sh" }
    - { src: "backup/restore.sh.j2", dest: "/usr/local/lib/backupscripts/restore/webdav.sh" }
  tags:
    - config
    
- name: Configure pacmanrepo dir
  file:
    path: "{{ item }}"
    owner: pacmanrepo
    group: pacmanrepo
    mode: '{{ server_pacmanrepo_access_rights | default("0555") }}'
    state: directory
  loop:
    - '/var/lib/pacman-repo'
    - '/var/lib/pacman-repo/packages'
  tags:
    - config

- name: Configure pacman hook dir
  file:
    path: "/etc/pacman.d/hooks"
    mode: '0755'
    state: directory
  tags:
    - config

- name: Install pacman hook to keep cached files updated
  template:
    src: "pacman-repo-cache-update.hook.j2"
    dest: "/etc/pacman.d/hooks/pacman-repo-cache-update.hook"
    mode: '0700'
  tags:
    - config

- name: 'Create certificates'
  command: certbot certonly --standalone --http-01-port {{ letsencrypt_port }} -d {{ item }}.{{ domain }} -m {{ letsencrypt_mail }} --agree-tos -n
  args:
    creates: /etc/letsencrypt/live/{{ item }}.{{ domain }}/privkey.pem
  loop:
    - repo
  notify: restart_nginx
  tags:
    - config

- name: 'Create config nginx'
  template:
    src: nginx/repo.conf.j2
    dest: '/etc/nginx/servers.d/pacman-repo.conf'
    mode: '0700'
  notify: restart_nginx
  tags:
    - config
    
- name: 'Create empty repo'
  command: 'repo-add /var/lib/pacman-repo/packages/{{ server_pacmanrepo_name }}.db.tar.zst'
  args:
    creates: /var/lib/pacman-repo/packages/{{ server_pacmanrepo_name }}.db.tar.zst
  when: server_pacmanrepo_name is defined
  
- name: Adds users
  vars:
    password: "{{ item.passwort | default(lookup('password', '/dev/null')) }}"
  shell:
    cmd: 'server_pacmanrepo_adduser "{{ item.name }}"'
    stdin: "{{ password }}\n"
  loop: "{{ server_pacmanrepo_users }}"
  when: server_pacmanrepo_users is defined
  tags:
    - config
    
- name: Resets passwords
  vars:
    password: "{{ item.password }}"
  shell:
    cmd: 'server_pacmanrepo_resetpwd "{{ item.name }}"'
    stdin: "{{ password }}\n"
  when:  server_pacmanrepo_users is defined and item.password is defined
  loop: "{{ server_pacmanrepo_users }}"
  tags:
    - config
