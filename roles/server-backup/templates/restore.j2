#!/bin/bash

MOUNTDIR=$(mktemp -d)

{% if restore_server_host is defined %}
sshfs -o ro -p {{ restore_server_port }} {{ restore_server_user }}@{{ restore_server_host }}:{{ restore_server_path }} "$MOUNTDIR"

SSHFS_RC=$?
{% else %}
MOUNTDIR={{ restore_server_path }}
{% endif %}

function rsync_restore {
{% if restore_server_host is defined %}
	rsync --info=progress2 -t -r -l --delete -e "ssh -p {{ restore_server_port }}" {{ restore_server_user }}@{{ restore_server_host }}:{{ restore_server_path }}/"$1"  "$2"
{% else %}
	rsync --info=progress2 -t -r -l --delete {{ restore_server_path }}/"$1"  "$2"
{% endif %}
}

export -f rsync_restore

REPORT_MAIL_DIR=$(mktemp -d)
REPORT_FILE=$REPORT_MAIL_DIR/report
LOGS_FILE=$REPORT_MAIL_DIR/logs
CURRENT_LOG_FILE=$REPORT_MAIL_DIR/current
REPORT_MAIL_FILE=$REPORT_MAIL_DIR/mail
CURRENT_TIMER_FILE=$REPORT_MAIL_DIR/timer


echo "Restore report for $TO_RESTORE on {{ fqdn }}" >> $REPORT_FILE
echo "To: admin@{{ domain }}" > $REPORT_MAIL_FILE
echo "From: backup@{{ domain }}" >> $REPORT_MAIL_FILE
echo "Subject: Backup report {{ fqdn }} - $(date)" >> $REPORT_MAIL_FILE

{% if restore_server_host is defined %}
OVERALL_RC=$SSHFS_RC
{% else %}
OVERALL_RC=0
{% endif %}

COMMAND=/usr/local/lib/backupscripts/restore/$1.sh
	
if [ -z "$1" ]
then
	echo Possible restores:
	ls /usr/local/lib/backupscripts/restore/ | sed -e "s|.sh||"
	exit 1
fi

if [ 0 -eq "$OVERALL_RC" ]
then
		echo Running $COMMAND
		
		\time -o $CURRENT_TIMER_FILE --format="%E %x" -- bash -c "bash $COMMAND $MOUNTDIR 2>&1 | tee $CURRENT_LOG_FILE; exit ${PIPESTATUS[0]}"
		
		DURATION=$(cat $CURRENT_TIMER_FILE | cut -d ' ' -f 1)
		RC=$(cat $CURRENT_TIMER_FILE | cut -d ' ' -f 2)
		
		(( OVERALL_RC |= RC ))
		
		if [ 0 -eq "$RC" ]
		then
			echo "OK  - $(basename "$COMMAND") - $DURATION" | tee -a $REPORT_FILE
		else
			echo "ERR - $(basename "$COMMAND") - RC: $RC" - $DURATION | tee -a $REPORT_FILE
			echo -e "BEGIN OUTPUT $(basename "$C")\n" | tee -a $LOGS_FILE
			cat $CURRENT_LOG_FILE | tee $LOGS_FILE
			echo -e "END OUTPUT $(basename "$C")\n\n" | tee -a $LOGS_FILE
		fi
else
	echo "ERR - mounting backup destination failed - RC: $SSHFS_RC"  | tee -a $REPORT_FILE
fi

cat $REPORT_FILE >> $REPORT_MAIL_FILE
[ -f $LOGS_FILE ] && cat $LOGS_FILE >> $REPORT_MAIL_FILE

SENDMAIL_COMMAND="sendmail admin@{{ domain }}"
[ -z "$SKIP_MAIL" ] && SENDMAIL_COMMAND="cat"

[ 0 -ne "$OVERALL_RC" ] && $SENDMAIL_COMMAND < $REPORT_MAIL_FILE

{% if restore_server_host is defined %}
umount "$MOUNTDIR" && rm -r "$MOUNTDIR"
{% endif %}

rm -r $REPORT_MAIL_DIR
