#!/bin/bash

. /usr/local/bin/storage_helpers

# check for dependencies

[ "$DEBUG" = 1 ] && set -x

function checkMetaData {
	STORAGE_META_DIR="$1"
	[ ! -f "$STORAGE_META_DIR/.created" ] || [ ! "$(cat "$STORAGE_META_DIR/.created")" == "single" ] && { echo Single pool marker file missing, invalid meta data dir && exit 1; }
}

function create {	
	STORAGE_META_DIR="$1"
	
	[ ! -f "$STORAGE_META_DIR/.created" ] && CALLED_FROM_SUBCOMMAND=yes storage_pool create "$@"
	
	[ ! -d "$STORAGE_META_DIR/keyfiles" ] && echo Keyfiles missing, invalid meta data dir && exit 1
	[ -f "$STORAGE_META_DIR/.created" ] && [ "$(cat "$STORAGE_META_DIR/.created")" == "single" ] && echo Already initialized, exiting && exit 1
	
	touch "$STORAGE_META_DIR/devices"
	
	echo "single" > "$STORAGE_META_DIR/.created"
}

function add {
	[ "$CALLED_FROM_POOL" == yes ] || { echo Only use this command from storage_pool && exit 1; }
	
	STORAGE_META_DIR="$1"
	checkMetaData "$STORAGE_META_DIR"
	
	DEVICE="$2"
	FS="$3"
	[ -z "$FS" ] && FS=existing
	ID="$(getDeviceId "$DEVICE")"
	MOUNT_DIR=$(getMountpoint "$STORAGE_META_DIR")
	
	checkMetaData "$STORAGE_META_DIR"
	
	umountPool "$STORAGE_META_DIR"
	
	[ $(cat "$STORAGE_META_DIR/devices" | wc -l) -gt 0 ] && echo "Single pools can only have one device" && return 1
	grep -q "$ID" "$STORAGE_META_DIR/devices" || echo "$ID" >> "$STORAGE_META_DIR/devices"
	
	storage_pool openDevices "$STORAGE_META_DIR" || return 1
	
	if [ "$FS" != existing ]
	then
		! command -v mkfs.$FS 2>&1 > /dev/null && echo mkfs.$FS missing && exit 1
		mkfs.$FS "$(getTopDevice "$DEVICE")"
	fi
	
	storage_block_crypto umap "$STORAGE_META_DIR/keyfiles"

	storage_pool closeDevices "$STORAGE_META_DIR"
}

function mountPool {
	STORAGE_META_DIR="$1"

	checkMetaData "$STORAGE_META_DIR"
	
	storage_pool openDevices "$STORAGE_META_DIR"
	
	MOUNT_DIR=$(getMountpoint "$STORAGE_META_DIR")

	mkdir -p "$MOUNT_DIR"

	mount $(getTopDevice "$(getDeviceForId "$(cat "$STORAGE_META_DIR"/devices)")") $(getMountpoint "$STORAGE_META_DIR") || return 1
	return 0
}


function umountPool {	
	STORAGE_META_DIR="$1"
	checkMetaData "$STORAGE_META_DIR"

	MOUNT_DIR=$(getMountpoint "$STORAGE_META_DIR")
	umount "$MOUNT_DIR" 2>&1 > /dev/null
	
	
	RESULT=0
	
	storage_pool closeDevices "$STORAGE_META_DIR"; RESULT=$((RESULT + $?))
	
	RESULT=$((RESULT + $?))
	return $RESULT
}

COMMAND=$1
shift

set +e
 
case $COMMAND in
	mount) mountPool "$@" ;;
	umount) umountPool "$@" ;;
	create) create "$@" ;;
	add) add "$@" ;;
	remove) remove "$@" ;;
	status) status "$@" ;;
	*) echo "Usage:
storage_pool_snapraid <mount|umount> <metadir>
storage_pool_snapraid create <metadir> <mergerfsopts>
storage_pool_snapraid add <metadir> <device> <fs>
  fs: fs name as used in mkfs.*, existing is used by default
storage_pool_snapraid status <metadir>" ;;
esac


