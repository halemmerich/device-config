#!/bin/bash

. /usr/local/bin/storage_helpers

! command -v mkfs.btrfs 2>&1 > /dev/null && echo btrfs-progs missing && exit 1

[ "$DEBUG" = 1 ] && set -x

function getMountableDevice {
	STORAGE_META_DIR="$1"
	for C in $(cat "$STORAGE_META_DIR"/devices)
	do
		echoerr checking $C
		DEVICE="$(getTopDevice "$C")"
		blkid "$DEVICE" | grep -q btrfs && echo "$DEVICE" && break
	done
}

function create {
	STORAGE_META_DIR="$1"

	[ ! -f "$STORAGE_META_DIR/.created" ] && CALLED_FROM_SUBCOMMAND=yes storage_pool create "$@"

	[ -f "$STORAGE_META_DIR/.created" ] && [ "$(cat "$STORAGE_META_DIR/.created")" == "btrfs" ] && echo Already initialized, exiting && exit 1

	echo "btrfs" > "$STORAGE_META_DIR/.created"
}

function changeProfile {
	STORAGE_META_DIR="$1"
	PROFILE_DATA="$2"
	PROFILE_META="$3"
	[ -z "$PROFILE_DATA" ] && echo Profile for data needed
	[ -z "$PROFILE_META" ] && PROFILE_META=$PROFILE_DATA

	[ ! -f "$STORAGE_META_DIR/.created" ] || [ ! "$(cat "$STORAGE_META_DIR/.created")" == "btrfs" ] && { echo BTRFS pool marker file missing, invalid meta data dir && exit 1; }

	umountPool "$STORAGE_META_DIR"
	mountPool "$STORAGE_META_DIR"

	btrfs balance start -dconvert="$PROFILE_DATA" -mconvert="$PROFILE_META" "$(getMountpoint "$STORAGE_META_DIR")"

	umountPool "$STORAGE_META_DIR"
}

function add {
	[ "$CALLED_FROM_POOL" == yes ] || { echo Only use this command from storage_pool && exit 1; }

	STORAGE_META_DIR="$1"
	DEVICE="$2"

	ID="$(getDeviceId "$DEVICE")"

	[ ! -f "$STORAGE_META_DIR/.created" ] || [ ! "$(cat "$STORAGE_META_DIR/.created")" == "btrfs" ] && { echo BTRFS pool marker file missing, invalid meta data dir && exit 1; }

	umountPool "$STORAGE_META_DIR"

	storage_pool openDevices "$STORAGE_META_DIR"

	if [ -n "$(getMountableDevice "$STORAGE_META_DIR")" ]
	then
		mountPool "$STORAGE_META_DIR"
		btrfs device add "$(getTopDevice $DEVICE)" "$(getMountpoint "$STORAGE_META_DIR")" || return 1
		umountPool "$STORAGE_META_DIR"
	else
		mkfs.btrfs -L data -f "$(getTopDevice $DEVICE)" || return 1
	fi

	storage_pool closeDevices "$STORAGE_META_DIR"
}

function mountPool {
	STORAGE_META_DIR="$1"

	storage_pool openDevices "$STORAGE_META_DIR"

	MOUNT_DIR="$(getMountpoint "$STORAGE_META_DIR")"
	mkdir -p $MOUNT_DIR || return 1

	assertUnmounted "$STORAGE_META_DIR"

	mount "$(getMountableDevice "$STORAGE_META_DIR")" $MOUNT_DIR || umountPool "$STORAGE_META_DIR"
}

function umountPool {
	STORAGE_META_DIR="$1"
	MOUNT_DIR=$(getMountpoint "$STORAGE_META_DIR")
	mountpoint "$MOUNT_DIR" > /dev/null && umount "$MOUNT_DIR"

	storage_pool closeDevices "$STORAGE_META_DIR"
}

function balance {
	STORAGE_META_DIR="$1"
	FILTERS="$2"
	[ -z "$FILTERS" ] && FILTERS="usage=30"

	assertMounted "$STORAGE_META_DIR"

	btrfs balance start -d$2 -m$2 $(getMountpoint "$STORAGE_META_DIR")|| return 1
}

function scrub {
	STORAGE_META_DIR="$1"
	TYPE="$2"
	[ -z "$TYPE" ] && TYPE=mini
	MINI_SCRUB_TIME="$3"
	[ -z "$MINI_SCRUB_TIME" ] && MINI_SCRUB_TIME=1h

	assertMounted "$STORAGE_META_DIR"

	STATUS=$(btrfs scrub status $(getMountpoint "$STORAGE_META_DIR") | grep Status | tr -s ' ' | cut -d ' ' -f2)

	[ -z "$STATUS" ] && STATUS=finished

	if [ "$TYPE" == mini ]
	then
		[ "$STATUS" == finished ] && ( btrfs scrub start -c 3 "$(getMountpoint "$STORAGE_META_DIR")" || return 1 )
		[ "$STATUS" == aborted -o "$STATUS" == interrupted ] && ( btrfs scrub resume "$(getMountpoint "$STORAGE_META_DIR")" || return 1 )
		sleep "$MINI_SCRUB_TIME" || return 1
		if [ "$STATUS" == running ]
		then
			btrfs scrub cancel "$(getMountpoint "$STORAGE_META_DIR")" || return 1
		elif [ "$STATUS" == finished ]
		then
			return 0
		else
			return 1;
		fi
	elif [ "$TYPE" == full ]
	then
		if [ "$STATUS" == finished ]
		then
			date +%s > "$STORAGE_META_DIR/state_last_full_scrub_start"
			btrfs scrub start -B -c 3 "$(getMountpoint "$STORAGE_META_DIR")" || return 1
			date > "$STORAGE_META_DIR/state_last_full_scrub"
		fi
		if [ "$STATUS" == aborted -o "$STATUS" == interrupted ]
		then
			btrfs scrub resume -B "$(getMountpoint "$STORAGE_META_DIR")" || return 1
		fi
	fi
}

function maintenance {
	STORAGE_META_DIR="$1"
	[ -e "$STORAGE_META_DIR/config" ] && . $STORAGE_META_DIR/config
	TYPE="$2"
	[ -z "$TYPE" ] && TYPE=mini
	[ -z "$MAINTENANCE_MINI_SCRUB_TIME" ] && MAINTENANCE_MINI_SCRUB_TIME=1h
	[ -z "$MAINTENANCE_MINI_BALANCE_PERCENTAGE" ] && MAINTENANCE_MINI_BALANCE_PERCENTAGE=20

	assertMounted "$STORAGE_META_DIR"

	STATUS=$(btrfs scrub status "$(getMountpoint "$STORAGE_META_DIR")" | grep Status | tr -s ' ' | cut -d ' ' -f2)

	# finished running aborted

	scrub "$STORAGE_META_DIR" "$TYPE" "$MAINTENANCE_MINI_SCRUB_TIME" || return 1

	if [ "$TYPE" == mini ]
	then
		btrfs balance start -d"$MAINTENANCE_MINI_BALANCE_PERCENTAGE" -m"$MAINTENANCE_MINI_BALANCE_PERCENTAGE" "$(getMountpoint "$STORAGE_META_DIR")" || return 1
	elif [ "$TYPE" == full ]
	then
		btrfs balance start --full-balance "$(getMountpoint "$STORAGE_META_DIR")" || return 1
	fi
}

function status {
	STORAGE_META_DIR="$1"
	TYPE="$2"

	assertMounted "$STORAGE_META_DIR"

	OUTPUT="$(btrfs scrub status $(getMountpoint "$STORAGE_META_DIR"))"
	RESULT=0

	SUPER_ERRORS="$( echo "$OUTPUT" | grep "Error summary" | grep -Eo "super=[0-9]*" | cut -d '=' -f2)"
	CSUM_ERRORS="$( echo "$OUTPUT" | grep "Error summary" | grep -Eo "csum=[0-9]*" | cut -d '=' -f2)"
	ERRORS=$(( SUPER_ERRORS + CSUM_ERRORS ))

	[ "$ERRORS" -gt 0 ] && (( RESULT+=1 )) && echo Errors: $(echo "$ERRORS" )
	[ -f "$STORAGE_META_DIR/state_last_full_scrub" ] && echo -n "Scrubbed: " && cat "$STORAGE_META_DIR/state_last_full_scrub"
	[ -f "$STORAGE_META_DIR/state_last_sync" ] && echo -n "Synced: " && cat "$STORAGE_META_DIR/state_last_sync"

	btrfs device stats -c "$(getMountpoint "$STORAGE_META_DIR")" > /dev/null
	STATS_ERRORS=$?
	if [ "$STATS_ERRORS" -ne 0 ]
	then
		(( RESULT++ ))
		DEVICES_STATS=$(btrfs device stats "$(getMountpoint "$STORAGE_META_DIR")")
		echo Device Errors: $(( $(echo "$DEVICES_STATS" | tr -s ' ' | grep . | cut -d ' ' -f2 | paste -sd+) ))
		echo "$DEVICES_STATS"  | grep -v "0$" | sed -e "s|\\[\\(.*\\)\\]\\.\\([_a-z]*\\)_errs.*\\([0-9]\\)|\1 Type:\2 Count:\3|"
	fi

	FILES=""
	if [ -f "$STORAGE_META_DIR/state_last_full_scrub_start" ]
	then
		STARTINGTIME=$(cat "$STORAGE_META_DIR/state_last_full_scrub_start")
		INODES=$(journalctl --since=@$STARTINGTIME | grep BTRFS | grep inode | sed -e "s|.*path: \(.*\).|\1|" | sort -u)
		for C in $INODES
		do
			FILES="$FILES\n$(getMountpoint "$STORAGE_META_DIR")/$C"
		done
	fi
	[ $(echo "$FILES" | wc -l ) -gt 1 ] && echo Files: $(echo "$FILES" )

	[ "$TYPE" == full ] && echo --------- && echo "$OUTPUT" && btrfs device stats "$(getMountpoint "$STORAGE_META_DIR")"
	#echo $RESULT
	exit $RESULT
}

function backup {
	echo NOT IMPLEMENTED
	exit 1
}

COMMAND=$1
shift

case $COMMAND in
	mount) mountPool "$@" ;;
	umount) umountPool "$@" ;;
	create) create "$@" ;;
	add) add "$@" ;;
	remove) remove "$@" ;;
	balance) balance "$@" ;;
	scrub) scrub "$@" ;;
	maintenance) maintenance "$@" ;;
	status) status "$@" ;;
	backup) backup "$@" ;;
	changeProfile) changeProfile "$@" ;;
	*) echo "Usage:
storage_pool_btrfs <mount|umount> <metadir>
storage_pool_btrfs create <metadir>
storage_pool_btrfs add <metadir> <device>
storage_pool_btrfs balance <metadir>
storage_pool_btrfs scrub <metadir> <filters>
storage_pool_btrfs maintenance <metadir> <type>
storage_pool_btrfs analyse <metadir>
storage_pool_btrfs status <metadir>
storage_pool_btrfs changeProfile <metadir> <profiledata> [profilemeta]
storage_pool_btrfs backup <metadir> <type>" ;;
esac
