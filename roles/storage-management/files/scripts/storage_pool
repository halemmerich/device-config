#!/bin/bash

. /usr/local/bin/storage_helpers

# check for dependencies

[ "$DEBUG" = 1 ] && set -x

STORAGE_META_DIR="$2"

#resolve storage meta data directory agains PATH_POOLS
echo "$STORAGE_META_DIR" | grep '^/' > /dev/null && C="${PATH_POOLS}${STORAGE_META_DIR}"

function openDevices {
	STORAGE_META_DIR="$1"
	KEYFILES="$(ls -A "$STORAGE_META_DIR/keyfiles" | grep keyfile_)"
	DEVICES=""

	if [ -n "$KEYFILES" ]
	then
		storage_block_crypto map "$STORAGE_META_DIR/keyfiles" || return 1
	fi

	rescanDevices
}
function closeDevices {
	STORAGE_META_DIR="$1"
	KEYFILES="$(ls -A "$STORAGE_META_DIR/keyfiles" | grep keyfile_)"
	DEVICES=""

	if [ -n "$KEYFILES" ]
	then
		storage_block_crypto umap "$STORAGE_META_DIR/keyfiles"
	fi

	rescanDevices
}

function defer {
	STORAGE_META_DIR="$1"
	TYPE=$(cat $STORAGE_META_DIR/.created)
	export CALLED_FROM_POOL=yes

	[ -z "$TYPE" ] && echo No pool type detected && exit 1
	[ -n "$TYPE" ] && storage_pool_${TYPE} ${COMMAND} "$@"
}

function create {
	STORAGE_META_DIR="$1"
	[ -f "$STORAGE_META_DIR/.created" ] && echo Already initialized, exiting && exit 1

	mkdir -p "$STORAGE_META_DIR/keyfiles"
	touch "$STORAGE_META_DIR/devices"
	touch "$STORAGE_META_DIR/.created"

	[ "$CALLED_FROM_SUBCOMMAND" == yes ] || echo Warning, this only created a very basic pool structure, consider using one of the storage_pool_* scripts
}

function add {
	STORAGE_META_DIR="$1"
	DEVICE="$2"
	[ ! -f "$STORAGE_META_DIR/.created" ] && echo This is not a storage meta dir && exit 1
	[ -z "$DEVICE" ] && echo Device to add is needed && exit 1
	DEVICE_ID="$(getDeviceId $DEVICE)" || ( echo Could not get device ID; return 1 )
	[ -z "$DEVICE_ID" ] && echo Device ID empty && return 1
	grep -q "$DEVICE_ID" "$STORAGE_META_DIR"/devices && echo Device ID already added && return 1
	echo "$DEVICE_ID" >> "$STORAGE_META_DIR"/devices
	defer "$@"
}

function mount {
	STORAGE_META_DIR="$1"
	COMMAND=mount
	[ -d "$STORAGE_META_DIR" ] && defer "$STORAGE_META_DIR" || echo Storage metadata folder \""$STORAGE_META_DIR"\" not existing
	monitor "$STORAGE_META_DIR"
}

function automount {
	[ ! -f /etc/storage/automount ] && { echo Storage automount config not found; exit 0; }
	cat /etc/storage/automount | while read C
	do
		mount "$@"
	done
}

function autoumount {
	[ ! -f /etc/storage/automount ] && { echo Storage automount config not found; exit 0; }
	COMMAND=umount
	cat /etc/storage/automount | while read C
	do
		[ -d "$C" ] && defer "$C" || echo Storage metadata folder \""$C"\" not existing
	done
}

function monitor {
	MONITOR_LOG=$(mktemp)

	STORAGE_META_DIRS="$1"

	[ -z "$STORAGE_META_DIRS" ] && STORAGE_META_DIRS="$(find /etc/storage/pools/ -mindepth 1 -maxdepth 1 -type d)"

	echo "$STORAGE_META_DIRS" | while read C
	do
		if checkMounted "$C"
		then
			COMMAND=status
			STATUS="$(defer "$C")"
			RESULT=$?

			IS_RO=$(cat /proc/mounts | grep $(getMountpoint "$C") | grep -q "[[:space:]]ro[[:space:],]" && echo "Filesystem is read only" && (( RESULT++ )) )

			SMART=
			for DEV in $(cat "$C/devices")
			do
				SMART_COMMAND=smartctl
				SMART_REPORT=$(smartctl -a "$(getDeviceForId "$DEV")")
				SMART_RESULT=$?
				SMART_OK=$(( SMART_RESULT & 1 ))
				SMART_OPEN_FAILED=$(( SMART_RESULT & 2 ))
				SMART_COMMAND_FAILED=$(( SMART_RESULT & 4 ))
				SMART_DISK_FAILING=$(( SMART_RESULT & 8 ))
				SMART_DISK_PREFAIL=$(( SMART_RESULT & 16 ))
				SMART_DISK_PREFAIL_PAST=$(( SMART_RESULT & 32 ))
				SMART_DISK_HAS_ERRORS_IN_LOG=$(( SMART_RESULT & 64 ))
				SMART_DISK_HAS_SELFTEST_ERRORS_IN_LOG=$(( SMART_RESULT & 128 ))

				if [ "$SMART_RESULT" -ne 0 ]
				then
					(( RESULT++ ))
					SMART="$SMART
SMART Status for $DEV at $(getDeviceForId "$DEV"):"
					[ "$SMART_OPEN_FAILED" -ne 0 ] && SMART="$SMART
Failed to open device"
					[ "$SMART_COMMAND_FAILED" -ne 0 ] && SMART="$SMART
Command to disk failed"
					[ "$SMART_DISK_FAILING" -ne 0 ] && SMART="$SMART
Disk is failing for these attributes
\`\`\`
    $(echo "$SMART_REPORT" | grep 'ID#')
    $(echo "$SMART_REPORT" | grep FAILING_NOW)
\`\`\`"
					[ "$SMART_DISK_PREFAIL" -ne 0 ] && SMART="$SMART
Disk is pre fail for these attributes
\`\`\`
    $(echo "$SMART_REPORT" | grep 'ID#')
    $(echo "$SMART_REPORT" | grep Pre-fail | awk '$4 <= $6')
\`\`\`"
					[ "$SMART_DISK_PREFAIL_PAST" -ne 0 ] && SMART="$SMART
Disk was pre fail in the past for these attributes
\`\`\`
    $(echo "$SMART_REPORT" | grep 'ID#')
    $(echo "$SMART_REPORT" | grep In_the_past)
\`\`\`"
					[ "$SMART_DISK_HAS_ERRORS_IN_LOG" -ne 0 ] && SMART="$SMART
Disk has errors in log"
					[ "$SMART_DISK_HAS_SELFTEST_ERRORS_IN_LOG" -ne 0 ] && SMART="$SMART
Disk has selftest errors in log"
				fi
			done

			if [ "$RESULT" -ne 0 ]
			then
				echo Pool $C is mounted but has problems >> "$MONITOR_LOG"
				[ -n "$IS_RO" ] && echo "$IS_RO" | sed 's|^|    |' >> "$MONITOR_LOG"
				[ -n "$STATUS" ] && echo "$STATUS" | sed 's|^|    |' >> "$MONITOR_LOG"
				[ -n "$SMART" ] && echo "$SMART" | sed 's|^|    |' | sed 's|^    ```$|```|' >> "$MONITOR_LOG"
			fi
		else
			echo Pool "$C" not mounted
		fi
	done

	[ -s "$MONITOR_LOG" ] && echoext "$MONITOR_LOG"
	rm "$MONITOR_LOG"
}

COMMAND=$1
shift

set +e

[ -z "$COMMAND" ] && echo "Usage:
storage_pool <mount|umount> <metadir>
storage_pool scrub <metadir> <type>
	Scrub the pool for errors, read only
storage_pool maintenance <metadir> <type>
	Regular maintenance of the pool, performs scrubbing and fixing of found errors
storage_pool fix <metadir>
	Repairs easy to fix errors
storage_pool monitor [metadir]
storage_pool status <metadir> <type>
storage_pool add <metadir> <device>
storage_pool automount <metadir>
storage_pool openDevices <metadir>
storage_pool closeDevices <metadir>

Example 1:
  Create and mount a two device encrypted btrfs raid 1 pool for backing up a directory:

storage_pool_btrfs create poolDirName
storage_block_crypto create poolDirName/keyfiles /dev/blockDev1
storage_block_crypto create poolDirName/keyfiles /dev/blockDev2
storage_pool add poolDirName /dev/blockDev1
storage_pool add poolDirName /dev/blockDev2
storage_pool changeProfile raid1 raid1
storage_pool mount poolDirName
storage_backup create poolDirName rsync
storage_backup add poolDirName /path/to/backup/source
storage_backup backup

"

case $COMMAND in
	add) add "$@" ;;
	create) create "$@" ;;
	mount) mount "$@" ;;
	automount) automount "$@" ;;
	autoumount) autoumount "$@" ;;
	monitor) monitor "$@" ;;
	openDevices) openDevices "$@" ;;
	closeDevices) closeDevices "$@" ;;
	*) defer "$@" ;;
esac
