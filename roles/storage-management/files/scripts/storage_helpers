#!/bin/bash

# check for smartmontools, cryptsetup

! command -v cryptsetup 2>&1 > /dev/null && echo cryptsetup missing && exit 1

! command -v smartctl 2>&1 > /dev/null && echo smartmontools missing && exit 1

[ "$DEBUG" = 1 ] && set -x

XMPP_DESTINATION=( )
SEND_XMPP_EXECUTABLE="sendxmpp"

[ -f /etc/storage/config ] && . /etc/storage/config


function echoerr {
	echo "$@" 1>&2;
}

function echoext {
    if [ -f "$1" ]
    then
        for current in "${XMPP_DESTINATION[@]}"
        do
            "$SEND_XMPP_EXECUTABLE" -m "$1" -f /root/.sendxmpprc -t -n "$current"
        done
        cat "$1"
    else
        for current in "${XMPP_DESTINATION[@]}"
        do
            echo "$IDENTIFIER $@" | "$SEND_XMPP_EXECUTABLE" -f /root/.sendxmpprc -t -n "$current"
        done
        echo "$@"
    fi
}

function rescanDevices {
	command -v pvscan > /dev/null && pvscan -q > /dev/null 
	command -v vgscan > /dev/null && vgscan -q
	command -v lvscan > /dev/null && lvscan -q
	command -v btrfs > /dev/null && btrfs -q device scan
}

function getDeviceId {
	(
	set +x

	local DEVICE="$1"

	[ ! -b "$DEVICE" ] && echoerr WARNING: Argument already is an ID && echo "$DEVICE" && return 0

	local DISKID=$(smartctl -i $1 | grep WWN | cut -d ':' -f 2 | sed 's/ //g')
	local DISKID_TYPE=wwn

	[ -z "$DISKID" ] && DISKID="$(smartctl -i $1 | grep "Logical Unit" | cut -d ':' -f 2 | sed 's/ //g' | sed 's/^0x//')" && DISKID_TYPE="lun"
	[ -z "$DISKID" ] && DISKID="$(smartctl -d sat -i $1 | grep WWN | cut -d ':' -f 2 | sed 's/ //g')"
	[ "$DISKID" == "0000000000000000" ] && DISKID=""
	[ "$DISKID" == "error" ] && DISKID=""
	[ -z "$DISKID" ] && DISKID="$(smartctl -i $1 | grep Serial | cut -d ':' -f 2 | sed 's/ //g')" && DISKID_TYPE=serial
	[ -z "$DISKID" ] && DISKID="$(smartctl -d sat -i $1 | grep Serial | cut -d ':' -f 2 | sed 's/ //g')" && DISKID_TYPE=serial
	[ -z "$DISKID" ] && DISKID="$(realpath "$1" | sed -e "s|/|_|g")" && DISKID_TYPE=file
 
	echo "${DISKID_TYPE}_$DISKID" | tr -s '_'
	)
}

function getTopDevice {
	set +x
	ID="$1"
	DEVICE=""
	[ -b "$ID" ] && DEVICE="$ID" && ID="$(getDeviceId "$DEVICE")"
	[ -z "$DEVICE" ] && DEVICE="$(getDeviceForId "$ID")"
	[ -b /dev/mapper/${ID}_cached ] && echo /dev/mapper/${ID}_cached && return 0
	[ -b /dev/mapper/${ID}_integrity ] && echo /dev/mapper/${ID}_integrity && return 0
	[ -b /dev/mapper/${ID}_crypted ] && echo /dev/mapper/${ID}_crypted && return 0
	echo "$DEVICE"
}

function getBlockdevices {
	lsblk -l -o NAME,TYPE -f | grep "disk\|loop" | cut -d ' ' -f 1 | sed -e 's|^|/dev/|'
}

function getDeviceForId {
	local DISKID="$1"
	[ -b "$DISKID" ] && echo WARNING: Argument already is an device && echo "$DISKID" && return 0

	for C in $(getBlockdevices)
	do
		[ "$DISKID" == "$(getDeviceId $C)" ] && echo "$C" && break
	done
}

function assertMounted {
	STORAGE_META_DIR="$1"
	mountpoint "$(getMountpoint "$STORAGE_META_DIR")" > /dev/null || exit 1
}

function assertUnmounted {
	STORAGE_META_DIR="$1"
	mountpoint "$(getMountpoint "$STORAGE_META_DIR")" > /dev/null && exit 1
}

function getMountpoint {
	STORAGE_META_DIR="$1"
	PREFIX=/"$2"
	NAME=$(basename $(realpath "$STORAGE_META_DIR"))
	[ -f "$STORAGE_META_DIR/mountpoint" ] && NAME=$(cat "$STORAGE_META_DIR/mountpoint")
	echo "/mnt$PREFIX"/"$NAME" | tr -s "/"
}

function getPoolName {
	STORAGE_META_DIR="$1"
	echo "$(basename $(realpath "$STORAGE_META_DIR"))"
}

function checkDevicesAvailable {
	STORAGE_META_DIR="$1"
	for C in $(cat "$STORAGE_META_DIR/devices")
	do
		DEVICE=$(getDeviceForId "$C")
		[ -z "$DEVICE" ] && return 1
	done
	return 0;
}

function parseTimestamp {
	TIMESTAMP="$1"
	date -d @"$TIMESTAMP"
}

function getTimestamp {
	date +"%s"
}
